// Code generated by github.com/ngicks/estype/generator/genestime/gen_builtin/gen.go. DO NOT EDIT.

//go:generate go run ../../../generator/genestime/gen_builtin/gen.go -o builtin.go
package builtin

import (
	estime "github.com/ngicks/estype/fielddatatype/estime"
	"strconv"
	"time"
)

// Default is time.Time based type which can be directly marshalled to / unmarshaled from
// Elasticsearch default date format, "strict_date_optional_time||epoch_millis".
type Default time.Time

var parserDefault = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"2006-01-02T15:04:05.000Z0700",
		"2006-01-02",
	},
	"epoch_millis",
)

// String implements fmt.Stringer
func (t Default) String() string {
	return parserDefault.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t Default) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *Default) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserDefault.ParseJson(data)
	if err != nil {
		return err
	}
	*t = Default(tt)
	return nil
}

// DefaultNum is time.Time based type which can be directly marshalled to / unmarshaled from
// Elasticsearch default date format, "strict_date_optional_time||epoch_millis".
// This is almost identical to Default but it marshals into JSON number.
type DefaultNum time.Time

var parserDefaultNum = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"2006-01-02T15:04:05.000Z0700",
		"2006-01-02",
	},
	"epoch_millis",
)

// String implements fmt.Stringer
func (t DefaultNum) String() string {
	return strconv.FormatInt(parserDefaultNum.FormatNumber(time.Time(t)), 10)
}

// MarshalJSON implements json.Marshaler
func (t DefaultNum) MarshalJSON() ([]byte, error) {
	return []byte(t.String()), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *DefaultNum) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserDefaultNum.ParseJson(data)
	if err != nil {
		return err
	}
	*t = DefaultNum(tt)
	return nil
}

// DefaultNano is time.Time based type which can be directly marshalled to / unmarshaled from
// Elasticsearch default date format, "strict_date_optional_time_nanos||epoch_millis".
// This is nano sec precise counterpart of Default.
type DefaultNano time.Time

var parserDefaultNano = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"2006-01-02T15:04:05.000000000Z0700",
		"2006-01-02",
	},
	"epoch_millis",
)

// String implements fmt.Stringer
func (t DefaultNano) String() string {
	return parserDefaultNano.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t DefaultNano) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *DefaultNano) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserDefaultNano.ParseJson(data)
	if err != nil {
		return err
	}
	*t = DefaultNano(tt)
	return nil
}

// DefaultNumNano is time.Time based type which can be directly marshalled to / unmarshaled from
// Elasticsearch default date format, "strict_date_optional_time_nanos||epoch_millis".
// This is nano sec precise counterpart of DefaultNum.
type DefaultNumNano time.Time

var parserDefaultNumNano = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"2006-01-02T15:04:05.000000000Z0700",
		"2006-01-02",
	},
	"epoch_millis",
)

// String implements fmt.Stringer
func (t DefaultNumNano) String() string {
	return strconv.FormatInt(parserDefaultNumNano.FormatNumber(time.Time(t)), 10)
}

// MarshalJSON implements json.Marshaler
func (t DefaultNumNano) MarshalJSON() ([]byte, error) {
	return []byte(t.String()), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *DefaultNumNano) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserDefaultNumNano.ParseJson(data)
	if err != nil {
		return err
	}
	*t = DefaultNumNano(tt)
	return nil
}

// EpochMillis is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in date format, "epoch_millis".
type EpochMillis time.Time

var parserEpochMillis = estime.FromGoTimeLayoutUnsafe(
	[]string{},
	"epoch_millis",
)

// String implements fmt.Stringer
func (t EpochMillis) String() string {
	return strconv.FormatInt(parserEpochMillis.FormatNumber(time.Time(t)), 10)
}

// MarshalJSON implements json.Marshaler
func (t EpochMillis) MarshalJSON() ([]byte, error) {
	return []byte(t.String()), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *EpochMillis) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserEpochMillis.ParseJson(data)
	if err != nil {
		return err
	}
	*t = EpochMillis(tt)
	return nil
}

// EpochSecond is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in date format, "epoch_second".
type EpochSecond time.Time

var parserEpochSecond = estime.FromGoTimeLayoutUnsafe(
	[]string{},
	"epoch_second",
)

// String implements fmt.Stringer
func (t EpochSecond) String() string {
	return strconv.FormatInt(parserEpochSecond.FormatNumber(time.Time(t)), 10)
}

// MarshalJSON implements json.Marshaler
func (t EpochSecond) MarshalJSON() ([]byte, error) {
	return []byte(t.String()), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *EpochSecond) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserEpochSecond.ParseJson(data)
	if err != nil {
		return err
	}
	*t = EpochSecond(tt)
	return nil
}

// DateOptionalTime is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "date_optional_time"
type DateOptionalTime time.Time

var parserDateOptionalTime = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"2006-01-02T15:04:05.000Z0700",
		"06-1-2T15:04:05.000Z0700",
		"2006-01-02",
		"06-1-2",
	},
	"",
)

// String implements fmt.Stringer
func (t DateOptionalTime) String() string {
	return parserDateOptionalTime.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t DateOptionalTime) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *DateOptionalTime) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserDateOptionalTime.ParseJson(data)
	if err != nil {
		return err
	}
	*t = DateOptionalTime(tt)
	return nil
}

// StrictDateOptionalTime is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "strict_date_optional_time"
type StrictDateOptionalTime time.Time

var parserStrictDateOptionalTime = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"2006-01-02T15:04:05.000Z0700",
		"2006-01-02",
	},
	"",
)

// String implements fmt.Stringer
func (t StrictDateOptionalTime) String() string {
	return parserStrictDateOptionalTime.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t StrictDateOptionalTime) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *StrictDateOptionalTime) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserStrictDateOptionalTime.ParseJson(data)
	if err != nil {
		return err
	}
	*t = StrictDateOptionalTime(tt)
	return nil
}

// StrictDateOptionalTimeNanos is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "strict_date_optional_time_nanos"
type StrictDateOptionalTimeNanos time.Time

var parserStrictDateOptionalTimeNanos = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"2006-01-02T15:04:05.000000000Z0700",
		"2006-01-02",
	},
	"",
)

// String implements fmt.Stringer
func (t StrictDateOptionalTimeNanos) String() string {
	return parserStrictDateOptionalTimeNanos.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t StrictDateOptionalTimeNanos) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *StrictDateOptionalTimeNanos) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserStrictDateOptionalTimeNanos.ParseJson(data)
	if err != nil {
		return err
	}
	*t = StrictDateOptionalTimeNanos(tt)
	return nil
}

// BasicDate is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "basic_date"
type BasicDate time.Time

var parserBasicDate = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"20060102",
		"060102",
	},
	"",
)

// String implements fmt.Stringer
func (t BasicDate) String() string {
	return parserBasicDate.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t BasicDate) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *BasicDate) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserBasicDate.ParseJson(data)
	if err != nil {
		return err
	}
	*t = BasicDate(tt)
	return nil
}

// BasicDateTime is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "basic_date_time"
type BasicDateTime time.Time

var parserBasicDateTime = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"20060102T150405.000Z0700",
		"060102T150405.000Z0700",
	},
	"",
)

// String implements fmt.Stringer
func (t BasicDateTime) String() string {
	return parserBasicDateTime.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t BasicDateTime) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *BasicDateTime) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserBasicDateTime.ParseJson(data)
	if err != nil {
		return err
	}
	*t = BasicDateTime(tt)
	return nil
}

// BasicDateTimeNoMillis is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "basic_date_time_no_millis"
type BasicDateTimeNoMillis time.Time

var parserBasicDateTimeNoMillis = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"20060102T150405Z0700",
		"060102T150405Z0700",
	},
	"",
)

// String implements fmt.Stringer
func (t BasicDateTimeNoMillis) String() string {
	return parserBasicDateTimeNoMillis.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t BasicDateTimeNoMillis) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *BasicDateTimeNoMillis) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserBasicDateTimeNoMillis.ParseJson(data)
	if err != nil {
		return err
	}
	*t = BasicDateTimeNoMillis(tt)
	return nil
}

// BasicOrdinalDate is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "basic_ordinal_date"
type BasicOrdinalDate time.Time

var parserBasicOrdinalDate = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"2006002",
		"06002",
	},
	"",
)

// String implements fmt.Stringer
func (t BasicOrdinalDate) String() string {
	return parserBasicOrdinalDate.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t BasicOrdinalDate) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *BasicOrdinalDate) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserBasicOrdinalDate.ParseJson(data)
	if err != nil {
		return err
	}
	*t = BasicOrdinalDate(tt)
	return nil
}

// BasicOrdinalDateTime is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "basic_ordinal_date_time"
type BasicOrdinalDateTime time.Time

var parserBasicOrdinalDateTime = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"2006002T150405.000Z0700",
		"06002T150405.000Z0700",
	},
	"",
)

// String implements fmt.Stringer
func (t BasicOrdinalDateTime) String() string {
	return parserBasicOrdinalDateTime.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t BasicOrdinalDateTime) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *BasicOrdinalDateTime) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserBasicOrdinalDateTime.ParseJson(data)
	if err != nil {
		return err
	}
	*t = BasicOrdinalDateTime(tt)
	return nil
}

// BasicOrdinalDateTimeNoMillis is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "basic_ordinal_date_time_no_millis"
type BasicOrdinalDateTimeNoMillis time.Time

var parserBasicOrdinalDateTimeNoMillis = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"2006002T150405Z0700",
		"06002T150405Z0700",
	},
	"",
)

// String implements fmt.Stringer
func (t BasicOrdinalDateTimeNoMillis) String() string {
	return parserBasicOrdinalDateTimeNoMillis.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t BasicOrdinalDateTimeNoMillis) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *BasicOrdinalDateTimeNoMillis) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserBasicOrdinalDateTimeNoMillis.ParseJson(data)
	if err != nil {
		return err
	}
	*t = BasicOrdinalDateTimeNoMillis(tt)
	return nil
}

// BasicTime is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "basic_time"
type BasicTime time.Time

var parserBasicTime = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"150405.000Z0700",
	},
	"",
)

// String implements fmt.Stringer
func (t BasicTime) String() string {
	return parserBasicTime.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t BasicTime) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *BasicTime) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserBasicTime.ParseJson(data)
	if err != nil {
		return err
	}
	*t = BasicTime(tt)
	return nil
}

// BasicTimeNoMillis is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "basic_time_no_millis"
type BasicTimeNoMillis time.Time

var parserBasicTimeNoMillis = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"150405Z0700",
	},
	"",
)

// String implements fmt.Stringer
func (t BasicTimeNoMillis) String() string {
	return parserBasicTimeNoMillis.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t BasicTimeNoMillis) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *BasicTimeNoMillis) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserBasicTimeNoMillis.ParseJson(data)
	if err != nil {
		return err
	}
	*t = BasicTimeNoMillis(tt)
	return nil
}

// BasicTTime is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "basic_t_time"
type BasicTTime time.Time

var parserBasicTTime = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"T150405.000Z0700",
	},
	"",
)

// String implements fmt.Stringer
func (t BasicTTime) String() string {
	return parserBasicTTime.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t BasicTTime) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *BasicTTime) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserBasicTTime.ParseJson(data)
	if err != nil {
		return err
	}
	*t = BasicTTime(tt)
	return nil
}

// BasicTTimeNoMillis is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "basic_t_time_no_millis"
type BasicTTimeNoMillis time.Time

var parserBasicTTimeNoMillis = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"T150405Z0700",
	},
	"",
)

// String implements fmt.Stringer
func (t BasicTTimeNoMillis) String() string {
	return parserBasicTTimeNoMillis.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t BasicTTimeNoMillis) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *BasicTTimeNoMillis) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserBasicTTimeNoMillis.ParseJson(data)
	if err != nil {
		return err
	}
	*t = BasicTTimeNoMillis(tt)
	return nil
}

// Date is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "date"
type Date time.Time

var parserDate = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"2006-01-02",
		"06-1-2",
	},
	"",
)

// String implements fmt.Stringer
func (t Date) String() string {
	return parserDate.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t Date) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *Date) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserDate.ParseJson(data)
	if err != nil {
		return err
	}
	*t = Date(tt)
	return nil
}

// StrictDate is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "strict_date"
type StrictDate time.Time

var parserStrictDate = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"2006-01-02",
	},
	"",
)

// String implements fmt.Stringer
func (t StrictDate) String() string {
	return parserStrictDate.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t StrictDate) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *StrictDate) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserStrictDate.ParseJson(data)
	if err != nil {
		return err
	}
	*t = StrictDate(tt)
	return nil
}

// DateHour is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "date_hour"
type DateHour time.Time

var parserDateHour = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"2006-01-02T15",
		"06-1-2T15",
	},
	"",
)

// String implements fmt.Stringer
func (t DateHour) String() string {
	return parserDateHour.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t DateHour) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *DateHour) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserDateHour.ParseJson(data)
	if err != nil {
		return err
	}
	*t = DateHour(tt)
	return nil
}

// StrictDateHour is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "strict_date_hour"
type StrictDateHour time.Time

var parserStrictDateHour = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"2006-01-02T15",
	},
	"",
)

// String implements fmt.Stringer
func (t StrictDateHour) String() string {
	return parserStrictDateHour.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t StrictDateHour) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *StrictDateHour) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserStrictDateHour.ParseJson(data)
	if err != nil {
		return err
	}
	*t = StrictDateHour(tt)
	return nil
}

// DateHourMinute is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "date_hour_minute"
type DateHourMinute time.Time

var parserDateHourMinute = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"2006-01-02T15:04",
		"06-1-2T15:04",
	},
	"",
)

// String implements fmt.Stringer
func (t DateHourMinute) String() string {
	return parserDateHourMinute.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t DateHourMinute) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *DateHourMinute) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserDateHourMinute.ParseJson(data)
	if err != nil {
		return err
	}
	*t = DateHourMinute(tt)
	return nil
}

// StrictDateHourMinute is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "strict_date_hour_minute"
type StrictDateHourMinute time.Time

var parserStrictDateHourMinute = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"2006-01-02T15:04",
	},
	"",
)

// String implements fmt.Stringer
func (t StrictDateHourMinute) String() string {
	return parserStrictDateHourMinute.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t StrictDateHourMinute) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *StrictDateHourMinute) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserStrictDateHourMinute.ParseJson(data)
	if err != nil {
		return err
	}
	*t = StrictDateHourMinute(tt)
	return nil
}

// DateHourMinuteSecond is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "date_hour_minute_second"
type DateHourMinuteSecond time.Time

var parserDateHourMinuteSecond = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"2006-01-02T15:04:05",
		"06-1-2T15:04:05",
	},
	"",
)

// String implements fmt.Stringer
func (t DateHourMinuteSecond) String() string {
	return parserDateHourMinuteSecond.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t DateHourMinuteSecond) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *DateHourMinuteSecond) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserDateHourMinuteSecond.ParseJson(data)
	if err != nil {
		return err
	}
	*t = DateHourMinuteSecond(tt)
	return nil
}

// StrictDateHourMinuteSecond is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "strict_date_hour_minute_second"
type StrictDateHourMinuteSecond time.Time

var parserStrictDateHourMinuteSecond = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"2006-01-02T15:04:05",
	},
	"",
)

// String implements fmt.Stringer
func (t StrictDateHourMinuteSecond) String() string {
	return parserStrictDateHourMinuteSecond.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t StrictDateHourMinuteSecond) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *StrictDateHourMinuteSecond) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserStrictDateHourMinuteSecond.ParseJson(data)
	if err != nil {
		return err
	}
	*t = StrictDateHourMinuteSecond(tt)
	return nil
}

// DateHourMinuteSecondFraction is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "date_hour_minute_second_fraction"
type DateHourMinuteSecondFraction time.Time

var parserDateHourMinuteSecondFraction = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"2006-01-02T15:04:05.000",
		"06-1-2T15:04:05.000",
	},
	"",
)

// String implements fmt.Stringer
func (t DateHourMinuteSecondFraction) String() string {
	return parserDateHourMinuteSecondFraction.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t DateHourMinuteSecondFraction) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *DateHourMinuteSecondFraction) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserDateHourMinuteSecondFraction.ParseJson(data)
	if err != nil {
		return err
	}
	*t = DateHourMinuteSecondFraction(tt)
	return nil
}

// StrictDateHourMinuteSecondFraction is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "strict_date_hour_minute_second_fraction"
type StrictDateHourMinuteSecondFraction time.Time

var parserStrictDateHourMinuteSecondFraction = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"2006-01-02T15:04:05.000",
	},
	"",
)

// String implements fmt.Stringer
func (t StrictDateHourMinuteSecondFraction) String() string {
	return parserStrictDateHourMinuteSecondFraction.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t StrictDateHourMinuteSecondFraction) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *StrictDateHourMinuteSecondFraction) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserStrictDateHourMinuteSecondFraction.ParseJson(data)
	if err != nil {
		return err
	}
	*t = StrictDateHourMinuteSecondFraction(tt)
	return nil
}

// DateHourMinuteSecondMillis is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "date_hour_minute_second_millis"
type DateHourMinuteSecondMillis time.Time

var parserDateHourMinuteSecondMillis = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"2006-01-02T15:04:05.000",
		"06-1-2T15:04:05.000",
	},
	"",
)

// String implements fmt.Stringer
func (t DateHourMinuteSecondMillis) String() string {
	return parserDateHourMinuteSecondMillis.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t DateHourMinuteSecondMillis) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *DateHourMinuteSecondMillis) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserDateHourMinuteSecondMillis.ParseJson(data)
	if err != nil {
		return err
	}
	*t = DateHourMinuteSecondMillis(tt)
	return nil
}

// StrictDateHourMinuteSecondMillis is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "strict_date_hour_minute_second_millis"
type StrictDateHourMinuteSecondMillis time.Time

var parserStrictDateHourMinuteSecondMillis = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"2006-01-02T15:04:05.000",
	},
	"",
)

// String implements fmt.Stringer
func (t StrictDateHourMinuteSecondMillis) String() string {
	return parserStrictDateHourMinuteSecondMillis.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t StrictDateHourMinuteSecondMillis) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *StrictDateHourMinuteSecondMillis) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserStrictDateHourMinuteSecondMillis.ParseJson(data)
	if err != nil {
		return err
	}
	*t = StrictDateHourMinuteSecondMillis(tt)
	return nil
}

// DateTime is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "date_time"
type DateTime time.Time

var parserDateTime = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"2006-01-02T15:04:05.000Z0700",
		"06-1-2T15:04:05.000Z0700",
	},
	"",
)

// String implements fmt.Stringer
func (t DateTime) String() string {
	return parserDateTime.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t DateTime) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *DateTime) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserDateTime.ParseJson(data)
	if err != nil {
		return err
	}
	*t = DateTime(tt)
	return nil
}

// StrictDateTime is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "strict_date_time"
type StrictDateTime time.Time

var parserStrictDateTime = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"2006-01-02T15:04:05.000Z0700",
	},
	"",
)

// String implements fmt.Stringer
func (t StrictDateTime) String() string {
	return parserStrictDateTime.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t StrictDateTime) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *StrictDateTime) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserStrictDateTime.ParseJson(data)
	if err != nil {
		return err
	}
	*t = StrictDateTime(tt)
	return nil
}

// DateTimeNoMillis is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "date_time_no_millis"
type DateTimeNoMillis time.Time

var parserDateTimeNoMillis = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"2006-01-02T15:04:05Z0700",
		"06-1-2T15:04:05Z0700",
	},
	"",
)

// String implements fmt.Stringer
func (t DateTimeNoMillis) String() string {
	return parserDateTimeNoMillis.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t DateTimeNoMillis) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *DateTimeNoMillis) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserDateTimeNoMillis.ParseJson(data)
	if err != nil {
		return err
	}
	*t = DateTimeNoMillis(tt)
	return nil
}

// StrictDateTimeNoMillis is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "strict_date_time_no_millis"
type StrictDateTimeNoMillis time.Time

var parserStrictDateTimeNoMillis = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"2006-01-02T15:04:05Z0700",
	},
	"",
)

// String implements fmt.Stringer
func (t StrictDateTimeNoMillis) String() string {
	return parserStrictDateTimeNoMillis.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t StrictDateTimeNoMillis) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *StrictDateTimeNoMillis) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserStrictDateTimeNoMillis.ParseJson(data)
	if err != nil {
		return err
	}
	*t = StrictDateTimeNoMillis(tt)
	return nil
}

// Hour is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "hour"
type Hour time.Time

var parserHour = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"15",
	},
	"",
)

// String implements fmt.Stringer
func (t Hour) String() string {
	return parserHour.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t Hour) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *Hour) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserHour.ParseJson(data)
	if err != nil {
		return err
	}
	*t = Hour(tt)
	return nil
}

// StrictHour is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "strict_hour"
type StrictHour time.Time

var parserStrictHour = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"15",
	},
	"",
)

// String implements fmt.Stringer
func (t StrictHour) String() string {
	return parserStrictHour.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t StrictHour) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *StrictHour) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserStrictHour.ParseJson(data)
	if err != nil {
		return err
	}
	*t = StrictHour(tt)
	return nil
}

// HourMinute is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "hour_minute"
type HourMinute time.Time

var parserHourMinute = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"15:04",
	},
	"",
)

// String implements fmt.Stringer
func (t HourMinute) String() string {
	return parserHourMinute.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t HourMinute) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *HourMinute) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserHourMinute.ParseJson(data)
	if err != nil {
		return err
	}
	*t = HourMinute(tt)
	return nil
}

// StrictHourMinute is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "strict_hour_minute"
type StrictHourMinute time.Time

var parserStrictHourMinute = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"15:04",
	},
	"",
)

// String implements fmt.Stringer
func (t StrictHourMinute) String() string {
	return parserStrictHourMinute.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t StrictHourMinute) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *StrictHourMinute) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserStrictHourMinute.ParseJson(data)
	if err != nil {
		return err
	}
	*t = StrictHourMinute(tt)
	return nil
}

// HourMinuteSecond is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "hour_minute_second"
type HourMinuteSecond time.Time

var parserHourMinuteSecond = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"15:04:05",
	},
	"",
)

// String implements fmt.Stringer
func (t HourMinuteSecond) String() string {
	return parserHourMinuteSecond.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t HourMinuteSecond) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *HourMinuteSecond) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserHourMinuteSecond.ParseJson(data)
	if err != nil {
		return err
	}
	*t = HourMinuteSecond(tt)
	return nil
}

// StrictHourMinuteSecond is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "strict_hour_minute_second"
type StrictHourMinuteSecond time.Time

var parserStrictHourMinuteSecond = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"15:04:05",
	},
	"",
)

// String implements fmt.Stringer
func (t StrictHourMinuteSecond) String() string {
	return parserStrictHourMinuteSecond.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t StrictHourMinuteSecond) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *StrictHourMinuteSecond) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserStrictHourMinuteSecond.ParseJson(data)
	if err != nil {
		return err
	}
	*t = StrictHourMinuteSecond(tt)
	return nil
}

// HourMinuteSecondFraction is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "hour_minute_second_fraction"
type HourMinuteSecondFraction time.Time

var parserHourMinuteSecondFraction = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"15:04:05.000",
	},
	"",
)

// String implements fmt.Stringer
func (t HourMinuteSecondFraction) String() string {
	return parserHourMinuteSecondFraction.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t HourMinuteSecondFraction) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *HourMinuteSecondFraction) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserHourMinuteSecondFraction.ParseJson(data)
	if err != nil {
		return err
	}
	*t = HourMinuteSecondFraction(tt)
	return nil
}

// StrictHourMinuteSecondFraction is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "strict_hour_minute_second_fraction"
type StrictHourMinuteSecondFraction time.Time

var parserStrictHourMinuteSecondFraction = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"15:04:05.000",
	},
	"",
)

// String implements fmt.Stringer
func (t StrictHourMinuteSecondFraction) String() string {
	return parserStrictHourMinuteSecondFraction.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t StrictHourMinuteSecondFraction) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *StrictHourMinuteSecondFraction) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserStrictHourMinuteSecondFraction.ParseJson(data)
	if err != nil {
		return err
	}
	*t = StrictHourMinuteSecondFraction(tt)
	return nil
}

// HourMinuteSecondMillis is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "hour_minute_second_millis"
type HourMinuteSecondMillis time.Time

var parserHourMinuteSecondMillis = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"15:04:05.000",
	},
	"",
)

// String implements fmt.Stringer
func (t HourMinuteSecondMillis) String() string {
	return parserHourMinuteSecondMillis.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t HourMinuteSecondMillis) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *HourMinuteSecondMillis) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserHourMinuteSecondMillis.ParseJson(data)
	if err != nil {
		return err
	}
	*t = HourMinuteSecondMillis(tt)
	return nil
}

// StrictHourMinuteSecondMillis is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "strict_hour_minute_second_millis"
type StrictHourMinuteSecondMillis time.Time

var parserStrictHourMinuteSecondMillis = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"15:04:05.000",
	},
	"",
)

// String implements fmt.Stringer
func (t StrictHourMinuteSecondMillis) String() string {
	return parserStrictHourMinuteSecondMillis.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t StrictHourMinuteSecondMillis) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *StrictHourMinuteSecondMillis) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserStrictHourMinuteSecondMillis.ParseJson(data)
	if err != nil {
		return err
	}
	*t = StrictHourMinuteSecondMillis(tt)
	return nil
}

// OrdinalDate is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "ordinal_date"
type OrdinalDate time.Time

var parserOrdinalDate = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"2006-002",
		"06-002",
	},
	"",
)

// String implements fmt.Stringer
func (t OrdinalDate) String() string {
	return parserOrdinalDate.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t OrdinalDate) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *OrdinalDate) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserOrdinalDate.ParseJson(data)
	if err != nil {
		return err
	}
	*t = OrdinalDate(tt)
	return nil
}

// StrictOrdinalDate is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "strict_ordinal_date"
type StrictOrdinalDate time.Time

var parserStrictOrdinalDate = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"2006-002",
	},
	"",
)

// String implements fmt.Stringer
func (t StrictOrdinalDate) String() string {
	return parserStrictOrdinalDate.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t StrictOrdinalDate) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *StrictOrdinalDate) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserStrictOrdinalDate.ParseJson(data)
	if err != nil {
		return err
	}
	*t = StrictOrdinalDate(tt)
	return nil
}

// OrdinalDateTime is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "ordinal_date_time"
type OrdinalDateTime time.Time

var parserOrdinalDateTime = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"2006-002T15:04:05.000Z0700",
		"06-002T15:04:05.000Z0700",
	},
	"",
)

// String implements fmt.Stringer
func (t OrdinalDateTime) String() string {
	return parserOrdinalDateTime.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t OrdinalDateTime) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *OrdinalDateTime) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserOrdinalDateTime.ParseJson(data)
	if err != nil {
		return err
	}
	*t = OrdinalDateTime(tt)
	return nil
}

// StrictOrdinalDateTime is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "strict_ordinal_date_time"
type StrictOrdinalDateTime time.Time

var parserStrictOrdinalDateTime = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"2006-002T15:04:05.000Z0700",
	},
	"",
)

// String implements fmt.Stringer
func (t StrictOrdinalDateTime) String() string {
	return parserStrictOrdinalDateTime.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t StrictOrdinalDateTime) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *StrictOrdinalDateTime) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserStrictOrdinalDateTime.ParseJson(data)
	if err != nil {
		return err
	}
	*t = StrictOrdinalDateTime(tt)
	return nil
}

// OrdinalDateTimeNoMillis is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "ordinal_date_time_no_millis"
type OrdinalDateTimeNoMillis time.Time

var parserOrdinalDateTimeNoMillis = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"2006-002T15:04:05Z0700",
		"06-002T15:04:05Z0700",
	},
	"",
)

// String implements fmt.Stringer
func (t OrdinalDateTimeNoMillis) String() string {
	return parserOrdinalDateTimeNoMillis.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t OrdinalDateTimeNoMillis) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *OrdinalDateTimeNoMillis) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserOrdinalDateTimeNoMillis.ParseJson(data)
	if err != nil {
		return err
	}
	*t = OrdinalDateTimeNoMillis(tt)
	return nil
}

// StrictOrdinalDateTimeNoMillis is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "strict_ordinal_date_time_no_millis"
type StrictOrdinalDateTimeNoMillis time.Time

var parserStrictOrdinalDateTimeNoMillis = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"2006-002T15:04:05Z0700",
	},
	"",
)

// String implements fmt.Stringer
func (t StrictOrdinalDateTimeNoMillis) String() string {
	return parserStrictOrdinalDateTimeNoMillis.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t StrictOrdinalDateTimeNoMillis) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *StrictOrdinalDateTimeNoMillis) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserStrictOrdinalDateTimeNoMillis.ParseJson(data)
	if err != nil {
		return err
	}
	*t = StrictOrdinalDateTimeNoMillis(tt)
	return nil
}

// Time is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "time"
type Time time.Time

var parserTime = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"15:04:05.000Z0700",
	},
	"",
)

// String implements fmt.Stringer
func (t Time) String() string {
	return parserTime.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t Time) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *Time) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserTime.ParseJson(data)
	if err != nil {
		return err
	}
	*t = Time(tt)
	return nil
}

// StrictTime is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "strict_time"
type StrictTime time.Time

var parserStrictTime = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"15:04:05.000Z0700",
	},
	"",
)

// String implements fmt.Stringer
func (t StrictTime) String() string {
	return parserStrictTime.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t StrictTime) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *StrictTime) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserStrictTime.ParseJson(data)
	if err != nil {
		return err
	}
	*t = StrictTime(tt)
	return nil
}

// TimeNoMillis is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "time_no_millis"
type TimeNoMillis time.Time

var parserTimeNoMillis = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"15:04:05Z0700",
	},
	"",
)

// String implements fmt.Stringer
func (t TimeNoMillis) String() string {
	return parserTimeNoMillis.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t TimeNoMillis) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *TimeNoMillis) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserTimeNoMillis.ParseJson(data)
	if err != nil {
		return err
	}
	*t = TimeNoMillis(tt)
	return nil
}

// StrictTimeNoMillis is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "strict_time_no_millis"
type StrictTimeNoMillis time.Time

var parserStrictTimeNoMillis = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"15:04:05Z0700",
	},
	"",
)

// String implements fmt.Stringer
func (t StrictTimeNoMillis) String() string {
	return parserStrictTimeNoMillis.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t StrictTimeNoMillis) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *StrictTimeNoMillis) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserStrictTimeNoMillis.ParseJson(data)
	if err != nil {
		return err
	}
	*t = StrictTimeNoMillis(tt)
	return nil
}

// TTime is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "t_time"
type TTime time.Time

var parserTTime = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"T15:04:05.000Z0700",
	},
	"",
)

// String implements fmt.Stringer
func (t TTime) String() string {
	return parserTTime.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t TTime) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *TTime) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserTTime.ParseJson(data)
	if err != nil {
		return err
	}
	*t = TTime(tt)
	return nil
}

// StrictTTime is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "strict_t_time"
type StrictTTime time.Time

var parserStrictTTime = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"T15:04:05.000Z0700",
	},
	"",
)

// String implements fmt.Stringer
func (t StrictTTime) String() string {
	return parserStrictTTime.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t StrictTTime) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *StrictTTime) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserStrictTTime.ParseJson(data)
	if err != nil {
		return err
	}
	*t = StrictTTime(tt)
	return nil
}

// TTimeNoMillis is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "t_time_no_millis"
type TTimeNoMillis time.Time

var parserTTimeNoMillis = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"T15:04:05Z0700",
	},
	"",
)

// String implements fmt.Stringer
func (t TTimeNoMillis) String() string {
	return parserTTimeNoMillis.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t TTimeNoMillis) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *TTimeNoMillis) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserTTimeNoMillis.ParseJson(data)
	if err != nil {
		return err
	}
	*t = TTimeNoMillis(tt)
	return nil
}

// StrictTTimeNoMillis is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "strict_t_time_no_millis"
type StrictTTimeNoMillis time.Time

var parserStrictTTimeNoMillis = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"T15:04:05Z0700",
	},
	"",
)

// String implements fmt.Stringer
func (t StrictTTimeNoMillis) String() string {
	return parserStrictTTimeNoMillis.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t StrictTTimeNoMillis) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *StrictTTimeNoMillis) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserStrictTTimeNoMillis.ParseJson(data)
	if err != nil {
		return err
	}
	*t = StrictTTimeNoMillis(tt)
	return nil
}

// Year is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "year"
type Year time.Time

var parserYear = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"2006",
		"06",
	},
	"",
)

// String implements fmt.Stringer
func (t Year) String() string {
	return parserYear.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t Year) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *Year) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserYear.ParseJson(data)
	if err != nil {
		return err
	}
	*t = Year(tt)
	return nil
}

// StrictYear is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "strict_year"
type StrictYear time.Time

var parserStrictYear = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"2006",
	},
	"",
)

// String implements fmt.Stringer
func (t StrictYear) String() string {
	return parserStrictYear.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t StrictYear) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *StrictYear) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserStrictYear.ParseJson(data)
	if err != nil {
		return err
	}
	*t = StrictYear(tt)
	return nil
}

// YearMonth is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "year_month"
type YearMonth time.Time

var parserYearMonth = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"2006-01",
		"06-1",
	},
	"",
)

// String implements fmt.Stringer
func (t YearMonth) String() string {
	return parserYearMonth.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t YearMonth) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *YearMonth) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserYearMonth.ParseJson(data)
	if err != nil {
		return err
	}
	*t = YearMonth(tt)
	return nil
}

// StrictYearMonth is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "strict_year_month"
type StrictYearMonth time.Time

var parserStrictYearMonth = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"2006-01",
	},
	"",
)

// String implements fmt.Stringer
func (t StrictYearMonth) String() string {
	return parserStrictYearMonth.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t StrictYearMonth) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *StrictYearMonth) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserStrictYearMonth.ParseJson(data)
	if err != nil {
		return err
	}
	*t = StrictYearMonth(tt)
	return nil
}

// YearMonthDay is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "year_month_day"
type YearMonthDay time.Time

var parserYearMonthDay = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"2006-01-02",
		"06-1-2",
	},
	"",
)

// String implements fmt.Stringer
func (t YearMonthDay) String() string {
	return parserYearMonthDay.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t YearMonthDay) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *YearMonthDay) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserYearMonthDay.ParseJson(data)
	if err != nil {
		return err
	}
	*t = YearMonthDay(tt)
	return nil
}

// StrictYearMonthDay is time.Time based type which can be directly marshalled to / unmarshaled from
// the built-in format, "strict_year_month_day"
type StrictYearMonthDay time.Time

var parserStrictYearMonthDay = estime.FromGoTimeLayoutUnsafe(
	[]string{
		"2006-01-02",
	},
	"",
)

// String implements fmt.Stringer
func (t StrictYearMonthDay) String() string {
	return parserStrictYearMonthDay.FormatString(time.Time(t), 0)
}

// MarshalJSON implements json.Marshaler
func (t StrictYearMonthDay) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements json.Unmarshaler
func (t *StrictYearMonthDay) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		return nil
	}
	tt, err := parserStrictYearMonthDay.ParseJson(data)
	if err != nil {
		return err
	}
	*t = StrictYearMonthDay(tt)
	return nil
}
