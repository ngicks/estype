package main

import (
	"flag"

	"github.com/dave/jennifer/jen"
	"github.com/ngicks/estype/helper/util"
)

var (
	outFile = flag.String("o", "", "")
)

func main() {
	flag.Parse()

	out := util.OpenOutMust(*outFile)
	defer out.Close()

	f := jen.NewFilePath("github.com/ngicks/estype/fielddatatype")

	f.HeaderComment("// Code generated by github.com/ngicks/estype/generator/gen_aggregate_metric_double/gen.go. DO NOT EDIT.")

	for i := 0b0001; i <= 0b1111; i++ {
		var suffix string
		var min, max, sum, valueCount bool

		if i&0b0001 > 0 {
			suffix += "Min"
			min = true
		}
		if i&0b0010 > 0 {
			suffix += "Max"
			max = true
		}
		if i&0b0100 > 0 {
			suffix += "Sum"
			sum = true
		}
		if i&0b1000 > 0 {
			suffix += "ValueCount"
			valueCount = true
		}

		if min && max && sum && valueCount {
			suffix = ""
		}

		var comment = "// AggregateMetricDouble" + suffix + " represents Aggregate metric field type.\n" +
			"// As suffix suggests it is a partial object whose fields are explicitly enabled in mapping.json."
		if suffix == "" {
			comment = "// AggregateMetricDouble represents Aggregated metric field type.\n" +
				"// Every fields were explicitly enabled in mapping.json"
		}
		f.Comment(comment)
		f.Type().Id("AggregateMetricDouble" + suffix).StructFunc(func(g *jen.Group) {
			if min {
				g.Add(jen.Id("Min").Float64().Tag(map[string]string{`json`: `min`}))
			}
			if max {
				g.Add(jen.Id("Max").Float64().Tag(map[string]string{`json`: `max`}))
			}
			if sum {
				g.Add(jen.Id("Sum").Float64().Tag(map[string]string{`json`: `sum`}))
			}
			if valueCount {
				g.Add(jen.Id("ValueCount").Float64().Tag(map[string]string{`json`: `value_count`}))
			}
		})
	}

	err := f.Render(out)
	if err != nil {
		panic(err)
	}
}
